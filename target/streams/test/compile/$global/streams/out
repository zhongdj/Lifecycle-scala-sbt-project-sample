[0m[[0mdebug[0m] [0mThe net.imadz.sample.Truck source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m	notify, wait, doWork, $asInstanceOf, doFail, state, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, doRecycle, doUndeploy, canEqual, doRelease, productPrefix, doDeploy, notifyAll, recordOldState, isInstanceOf, getState, <init>, id, lastState, ==, clone, doResume, getHistoryState, copy, toString, !=, Truck, getClass, copy$default$1, ne, getId, getLastState, eq, productIterator, ##, finalize, productElement, hashCode.[0m
[0m[[0mdebug[0m] [0mAll member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0mFiles invalidated by inheriting from (external) net.imadz.sample.Truck: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0mGetting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0mGetting sources that directly depend on (external) net.imadz.sample.Truck.[0m
[0m[[0mdebug[0m] [0mName hashing optimization doesn't apply to non-Scala dependency: /Users/geek/Workspaces/sbtexample/src/test/java/net/imadz/scheduling/simulation/TruckResourceTest.java[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mInitial source changes: [0m
[0m[[0mdebug[0m] [0m	removed:Set()[0m
[0m[[0mdebug[0m] [0m	added: Set()[0m
[0m[[0mdebug[0m] [0m	modified: Set(/Users/geek/Workspaces/sbtexample/src/test/java/net/imadz/scheduling/simulation/TruckResourceTest.java)[0m
[0m[[0mdebug[0m] [0mRemoved products: Set()[0m
[0m[[0mdebug[0m] [0mExternal API changes: API Changes: Set(NamesChange(net.imadz.sample.Truck,ModifiedNames(regularNames = notify, wait, doWork, $asInstanceOf, doFail, state, productArity, equals, asInstanceOf, synchronized, $isInstanceOf, doRecycle, doUndeploy, canEqual, doRelease, productPrefix, doDeploy, notifyAll, recordOldState, isInstanceOf, getState, <init>, id, lastState, ==, clone, doResume, getHistoryState, copy, toString, !=, Truck, getClass, copy$default$1, ne, getId, getLastState, eq, productIterator, ##, finalize, productElement, hashCode, implicitNames = )))[0m
[0m[[0mdebug[0m] [0mModified binary dependencies: Set()[0m
[0m[[0mdebug[0m] [0mInitial directly invalidated sources: Set(/Users/geek/Workspaces/sbtexample/src/test/java/net/imadz/scheduling/simulation/TruckResourceTest.java)[0m
[0m[[0mdebug[0m] [0m[0m
[0m[[0mdebug[0m] [0mSources indirectly invalidated by:[0m
[0m[[0mdebug[0m] [0m	product: Set()[0m
[0m[[0mdebug[0m] [0m	binary dep: Set()[0m
[0m[[0mdebug[0m] [0m	external source: Set(/Users/geek/Workspaces/sbtexample/src/test/java/net/imadz/scheduling/simulation/TruckResourceTest.java)[0m
[0m[[0mdebug[0m] [0mAll initially invalidated sources: Set(/Users/geek/Workspaces/sbtexample/src/test/java/net/imadz/scheduling/simulation/TruckResourceTest.java)[0m
[0m[[0mdebug[0m] [0mRecompiling all 1 sources: invalidated sources (1) exceeded 50.0% of all sources[0m
[0m[[0minfo[0m] [0mCompiling 1 Java source to /Users/geek/Workspaces/sbtexample/target/scala-2.11/test-classes...[0m
[0m[[0mdebug[0m] [0mAttempting to call javac directly...[0m
[0m[[0mdebug[0m] [0mcom.sun.tools.javac.Main not found with appropriate method signature; forking javac instead[0m
[0m[[0mdebug[0m] [0mForking javac: javac @/var/folders/bk/1t1l38_13gg67d47yp6mplkw0000gr/T/sbt_e4d98d2b/argfile[0m
[0m[[0mdebug[0m] [0mjavac returned exit code: 0[0m
[0m[[0mdebug[0m] [0mJava compilation took 0.568114 s[0m
[0m[[0mdebug[0m] [0mJava analysis took 0.018695 s[0m
[0m[[0mdebug[0m] [0mNew invalidations:[0m
[0m[[0mdebug[0m] [0m	Set()[0m
[0m[[0mdebug[0m] [0mInitial set of included nodes: Set()[0m
[0m[[0mdebug[0m] [0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0mdebug[0m] [0m	Set()[0m
[0m[[0mdebug[0m] [0mAll newly invalidated sources after taking into account (previously) recompiled sources:Set()[0m
